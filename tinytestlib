#!/usr/bin/env bash

# Tinytestlib:
# Because all the other solutions I found to do basic bash shell script testing were too large.
# I eventually want to make it handle being run from either zsh or bash (and possibly
# other shells), but for now, it's just bash.

shell="bash"
# shell="sh"
# if [ -n "$ZSH_VERSION" ]; then
#    shell="zsh"
# elif [ -n "$BASH_VERSION" ]; then
#    shell="bash"
# else
#    echo "Unknown shell encountered" >&2
#    exit 1
# fi

# Exit on error
set -o errexit -o pipefail -o nounset
if [ "$shell" = "bash" ]; then
  set -o errtrace
fi

# ANSI color helpers
red_text() {
  echo -en "\e[31m${1}\e[0m"
}

green_text() {
  echo -en "\e[32m${1}\e[0m"
}

yellow_text() {
  echo -en "\e[93m${1}\e[0m"
}

# echo has nonstandard behavior, so...
posixy_echo_no_newline() {
  printf "%b" "$*"
}
posixy_echo() {
  posixy_echo_no_newline "$*"
  printf "\n"
}

hex_encode() {
  posixy_echo_no_newline "$*" | hexdump -ve '/1 "%02x"'
}

hex_decode() {
  # note that using -rp instead of -r -p as args to xxd will FAIL! what's an option parser? ;)
  posixy_echo_no_newline "$*" | xxd -r -p
}

# a zsh way to capture all of stdout, stderr and return
# printf 'status: %s\nstdout: %s\nstderr: %s\n' $? "${(q+)reply[@]}"
# Still being tested, so commented-out for now
# zsh-capture() {
#   'builtin' 'local' '__zrc'
#   __zrc="$(
#     __zrc="$( ("$@") || __zrc="$?"; 'builtin' 'printf' '%3d' "$__zrc")" 2>&1 ||
#       'builtin' 'printf' '-v' '__zrc' '%3d' "$?"
#     'builtin' 'unsetopt' 'multibyte'
#     'builtin' 'printf' '%s%18d' "$__zrc" "${#__zrc}"
#   )" || 'builtin' 'printf' '-v' '__zrc' '%3d%18d' "$?" '3'
#   'builtin' 'emulate' '-L' 'zsh' '-o' 'no_multibyte'
#   'builtin' 'local' '-i' n='__zrc[-18,-1]'
#   'builtin' 'typeset' '-ga' 'reply'
#   'builtin' 'set' '-A' 'reply' "$__zrc[-n-18,-22]" "$__zrc[1,-n-19]"
#   'builtin' 'return' '__zrc[-21,-19]'
# }

# Captures stdout, stderr and return code of any command into the named variables.
capture() {
  local _out_var _out _err_var _err _ret_var _ret debugflag
  local debugflag=
  if [ "$1" = "--debug" ]; then
    debugflag=1
    shift
  fi
  if [ "$#" -lt 4 ]; then
      echo "Usage: capture [--debug] <stdoutvarname> <stderrvarname> <returncodevarname> command [arg ...]"
      return 1
  fi
  _out_var="$1"; shift
  _err_var="$1"; shift
  _ret_var="$1"; shift
  _out=""
  _err=""
  _ret=""
  # just a modification of some nutso magic I found online that captures stdout into $_out, stderr into $_err and return/status code into $_ret
  # WITHOUT opening files, because touching the filesystem unnecessarily is sad (slows down tests, etc)
  # Modified from an answer here and only works in bash 4+: https://stackoverflow.com/questions/13806626/capture-both-stdout-and-stderr-in-bash
  # . <({ _err=$({ _out=$("$@"); _ret="$?"; } 2>&1; declare -p _out _ret >&2); declare -p _err; } 2>&1)
  eval "$({ _err=$({ _out=$("$@"); _ret="$?"; } 2>&1; declare -p _out _ret >&2); declare -p _err; } 2>&1)"

  if [ $debugflag ]; then
    yellow_text "\ncmd: $@" >&2
    yellow_text "\nout: $_out" >&2
    yellow_text "\nerr: $_err" >&2
    yellow_text "\nret: $_ret\n" >&2
  fi
  read $_out_var <<<$(printf "%b" "$_out")
  read $_err_var <<<$(printf "%b" "$_err")
  read $_ret_var <<<$(printf "%b" "$_ret")
  # echo "ret inside capture for '$@': $_ret"
  return $_ret
}

_assert_equality_or_lack_thereof() {
  local comp_op arg1_enc arg2_enc
  comp_op="$1"
  shift
  # to tapdance around escaping, ANSI etc. issues, I just encode to hex and compare those.
  # This may or may not be necessary anymore, but it fixed issues in the past
  # Wish it didn't have to fire up a subshell though; future tweak?
  arg1_enc=$(hex_encode $1)
  arg2_enc=$(hex_encode $2)
  if [ "$arg1_enc" $comp_op "$arg2_enc" ]; then
    green_text "."
    return 0
  else
    red_text "F"
    red_text "assert_equal failure: values <$1> and <$2> do not match" >&2
    echo "" >&2
    return 1
  fi
}

assert_equal() {
  _assert_equality_or_lack_thereof "==" "$1" "$2"
  return $?
}

assert_not_equal() {
  _assert_equality_or_lack_thereof "!=" "$1" "$2"
  return $?
}

assert_success() {
  local stdout stderr ret
  capture stdout stderr ret "$*"
  if [ "$ret" = "0" ]; then
    green_text "."
    return 0
  else
    red_text "F"
    red_text "assert_success failure: <$*>" >&2
    echo "" >&2
    return 1
  fi
}

assert_failure() {
  local stdout stderr ret
  capture stdout stderr ret "$*"
  if [ "$ret" != "0" ]; then
    green_text "."
    return 0
  else
    red_text "F"
    red_text "asserted failure, but it actually succeeded: <$*>" >&2
    echo "" >&2
    return 1
  fi
}

# the point of this is to convert nonzero exit codes to blanks (false) and anything else to "0" ("true")
shellboolean() {
  if [ "$1" = "0" ]; then
    echo -n "0"
    return 0
  else
    echo -n ""
    return $1
  fi
}

# Who tests the testers?? Obviously, the testers themselves test the testers!!
# Run this by passing env TEST=true
_tinytestlib_test() {
  local stdout stderr ret
  # test basic assert_equal success
  assert_equal "test with spaces" "test with spaces"
  assert_equal "\"quoted 'stuff'\"" "\"quoted 'stuff'\""
  # test basic assert_not_equal success
  assert_not_equal "a a" "b b"
  # test basic assert_equal success by capturing the stdout, stderr and returncode
  capture stdout stderr ret assert_equal "test with spaces" "test with spaces"
  assert_equal "$stdout" "\e[32m.\e[0m" # ansi green .
  assert_equal "$stderr" ""
  assert_equal "$ret" "0"
  # test basic assert_equal failure by capturing the stdout, stderr and returncode
  capture stdout stderr ret assert_equal "good" "bad"
  assert_equal "$stdout" "\e[31mF\e[0m" # ansi red F
  assert_equal "$stderr" "\e[31massert_equal failure: values <good> and <bad> do not match\e[0m"
  assert_equal "$ret" "1"
  # test the hex encoder/decoder
  local testencode testdecode teststring
  teststring="hello"
  testencode=$(hex_encode $teststring)
  testdecode=$(hex_decode $testencode)
  assert_equal "$teststring" "$testdecode"
  # test success and failure assertions
  assert_success ls
  assert_failure ls thisfilebetternotexist
}

_tinytestlib_testsuite() {
  local stdout stderr ret
  capture stdout stderr ret _tinytestlib_test
  echo -e $stdout
  echo -en $stderr
  # echo "ret: $ret"
  if [[ "$stdout" =~ 'F' ]]; then
    echo
    red_text "Failure"
    echo
    return 1
  elif [[ "$stdout" =~ '.' ]]; then
    echo
    green_text "Success"
    echo
    return 0
  else
    echo
    yellow_text "Unknown; there appear to be no assertions"
    echo
    return 2
  fi
}

if [ ${TEST:-} ]; then
  # set -x
  # DO NOT exit on error
  set +o errexit
  # echo "bash suite:"
  bash << '  EOT'
    TEST="" source tinytestlib
    TEST=test _tinytestlib_testsuite
  EOT
  bashret=$(shellboolean $?)

  # zsh compatibility test commented-out for now.
  # echo "zsh suite:"
  # zsh << '  EOT'
  #   TEST="" source tinytestlib
  #   TEST=test _tinytestlib_testsuite
  # EOT
  # zshret=$(shellboolean $?)
  # if [[ "$bashret" && "$zshret" ]] ; then
  if [ "$bashret" = "0" ]; then
    echo
    green_text "Suite Success"
    echo
    exit 0
  else
    echo
    red_text "Suite Failure"
    echo
    exit 1
  fi
fi
